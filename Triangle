
/**
 *
 * @author usuario
 */
import javax.swing.JFrame;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Color;
import java.util.Random;
import java.util.ArrayList;

public class EquilateralTriangle extends JFrame
{
    //example coordiinates x=50,1050  y=550,50   z=50,866
    //x1=x x2=y
    //y1=x y2=y
    //z1=x z2=y
    public static final int WINDOW_HEIGHT=600;
    public static final int WINDOW_WIDTH=600;
    public static final double X1=50.0;
    public static final double X2=550.0;
    public static final double Y1=300.0;
    public static final double Y2=122.0;
    public static final double Z1=550.0;
    public static final double Z2=550.0;
    boolean drawTriangle=false;
    ArrayList<Double> current=new ArrayList<Double>();
    ArrayList<Double> allXCoordinates=new ArrayList<Double>();
    ArrayList<Double> allYCoordinates=new ArrayList<Double>();
    
    
    
    public static void main(String[] args)
    {
        EquilateralTriangle triangle=new EquilateralTriangle();
        triangle.setVisible(true);
    }
    private class Triangle implements ActionListener
    {
        public void actionPerformed(ActionEvent e)
        {
            randomCoordinate();
        }
    }    
            
    public EquilateralTriangle()
    {
        super("Seems Random Triangle");
        setSize(WINDOW_WIDTH,WINDOW_HEIGHT);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout( new BorderLayout());
        getContentPane().setBackground(Color.BLUE);
        JButton createTriangle = new JButton("Click to create a triangle");
        createTriangle.addActionListener(new Triangle());
        add(createTriangle, BorderLayout.SOUTH);
    }
    public void randomCoordinate()
    {
        current.add(X1);
        current.add(X2);
        ArrayList<Double> current2=new ArrayList<Double>();
        ArrayList<Double> target=new ArrayList<Double>();
        target.add(X1);
        target.add(X2);
        drawTriangle=true;
        int min=1;
        int max=3;
        int count=0;
        //int currentInteger=0;
        //double currentDouble=0.0;
        Random random=new Random();
        int randomNumber=0;
        while (count<1000)
        {
            randomNumber=random.nextInt(max - min + 1);
            //System.out.println(randomNumber);
            count++;
            if(randomNumber==0)
            {
                //System.out.println("current "+current.get(0));
                target.add(0,X1);
                target.add(1,X2);
                current2.add(0,(((double)current.get(0))+(double)target.get(0))/2.0);
                current2.add(1,((double)current.get(1)+target.get(1))/2.0);
                //System.out.println("current 2 "+current2.get(0));
                current.add(0,current2.get(0));
                current.add(1,current2.get(1));
                allXCoordinates.add(current.get(0));
                allYCoordinates.add(current.get(1));
                //System.out.println("current2 "+current2.get(0));
                //System.out.println(current.get(0));
                //System.out.println(current.get(1));
                //repaint();
            }
            else if(randomNumber==1)
            {
                target.add(0,Y1);
                target.add(1,Y2);
                current2.add(0,(((double)current.get(0))+target.get(0))/2.0);
                current2.add(1,((double)current.get(1)+target.get(1))/2.0);
                current.add(0,current2.get(0));
                current.add(1,current2.get(1));
                System.out.println("current "+current.get(0));
                //System.out.println("current "+current.get(1));
                allXCoordinates.add(current.get(0));
                allYCoordinates.add(current.get(1));
                //need to mark current on triangle
                //repaint();
            }
            else if (randomNumber==2)
            {
                target.add(0,Z1);
                target.add(1,Z2);
                current2.add(0,(((double)current.get(0))+target.get(0))/2.0);
                current2.add(1,((double)current.get(1)+target.get(1))/2.0);
                current.add(0,current2.get(0));
                current.add(1,current2.get(1));
                allXCoordinates.add(current.get(0));
                allYCoordinates.add(current.get(1));
                //repaint();
            }       
            else
            {
                System.out.println("unexpected error");
            }
        }   
        repaint();

    }
    public void paint(Graphics g)
    {
        System.out.println("in paint");
        super.paint(g);
        g.setColor(Color.RED);
        g.drawLine((int)X1, (int)X2, (int)X1, (int)X2);
        g.drawLine((int)Y1,(int)Y2,(int)Y1,(int)Y2);
        g.drawLine((int)Z1, (int)Z2, (int)Z1, (int)Z2);
        //set current and target
        if (drawTriangle)
        {
            current.get(0).intValue();
            System.out.println("drawTriangle=true");
            int i=0;
            while(i<999)
            {
                i++;
                g.drawLine(allXCoordinates.get(i).intValue(),allYCoordinates.get(i).intValue(),
                        allXCoordinates.get(i).intValue(),allYCoordinates.get(i).intValue());
            }
        }
     
        
    }
        
}
