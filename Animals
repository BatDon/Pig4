class land(object):
    def __init__(self,n,prey_amount=0,predator_amount=0):
        self.array_size=n
        self.grid=[]
        for i in range(n):
            row=[0]*n
            self.grid.append(row)
        self.init__animals(prey_amount,predator_amount)

    def animal(self,x,y):
        if 0<=x<self.array_size and 0<=y<self.array_size:
            return self.grid[x][y]
        else:
            return -1
    def init__animals(self,prey_amount,predator_amount):
            
        count=0

        while count<prey_amount:
            x=random.randint(0,self.array_size-1)
            y=random.randint(0,self.array_size-1)
            if not self.animal(x,y):
                new_prey=Prey(land=self,x=x,y=y)
                count+=1
                self.register(new_prey)
                count=0

        while count<predator_amount:
           x=random.randint(0,self.array_size-1)
           y=random.randint(0,self.array_size-1)
           if not self.animal(x,y):
               new_predator=Predator(land=self,x=x,y=y)
               count+=1
               self.register(new_predator)
    def size(self):
        return self.array_size

    def register(self,animal):
        x=animal.x
        y=animal.y
        self.grid[x][y]=animal
    
        
    def __str__(self):
        s=""
        for j in range(self.array_size-1,-1,-1):
            for i in range(self.array_size):
                if not self.grid[i][j]:
                    s+="{:<2s}".format('.'+" ")
                else:
                    s+="{:<2s}".format((str(self.grid[i][j]))+" ")
            s+="\n"
        return s


               
    def remove(self,x,y):
        self.grid[x][y]=0

class Animal(object):
    def __init__(self,land,x=0,y=0,s="A"):
        self.land=land
        self.name=s
        self.x=x         
        self.y=y

    def __str__(self):
        return self.name


    def position(self):
        return self.x,self.y

class Prey(Animal):
    def __init__(self,land,x=0,y=0,s="O"):
        Animal.__init__(self,land,x,y,s)
        self.breed_clock=self.breed_time

    def move(self):
        offset=[(-1,1),(0,1),(1,1),(-1,0),(1,0),(-1,-1),(0,-1),(1,-1)]
        for i in range(len(offset)):
            x=self.x+offset[i][0]
            y=self.y+offset[i][1]
            if self.land.animal(x,y)==0:
                self.land.remove(self)
                self.x=x
                self.y=y
                self.land.register(self)
                break    
        
class Predator(Animal):
    
    def __init__(self,land,x=0,y=0,s="X"):
        Animal.__init__(self,land,x,y,s)
        self.starve_clock=self.starve_time
        self.breed_clock=self.breed_time
    


    def move(self):
        offset=[(-1,1),(0,1),(1,1),(-1,0),(1,0),(-1,-1),(0,-1),(1,-1)]
        for i in range(len(offset)):
            x=self.x+offset[i][0]
            y=self.y+offset[i][1]
            if self.land.animal(x,y)==0:
                self.land.remove(self)
                self.x=x
                self.y=y
                self.land.register(self)
                break    
                 



    def main(predator_breed_time=8, predator_starve_time=2, initial_predators=5,\
         prey_breed_time=2, initial_prey=30,size=10,ticks=500):

    Predator.breed_time=predator_breed_time
    Predator.starve_time=predator_starve_time
    Prey.breed_time=prey_breed_time

    isle=land(size,initial_prey,initial_predators)
    print(isle)

    for i in range(ticks):
          for x in range(size):
              for y in range(size):
                  animal=isle.animal(x,y)
                  if animal:
                      if isinstance(animal,Predator):
                          animal.eat()
                  animal.move()
                  animal.breed()
                  animal.clock_tick()
          






    def check_grid(self,type_looking_for=int):
        offset=[(-1,1),(0,1),(1,1),(-1,0),(1,0),(-1,-1),(0,-1),(1,-1)]
        result=0
        for i in range(len(offset)):
            x=self.x+offset[i][0]
            y=self.y+offset[i][1]
            if not 0 <=x<self.land.size() or \
               not 0 <=y<self.land.size():
                    continue
            if type(self.land.animal(x,y))==type_looking_for:
                result=(x,y)
                break
        return result

    def move(self):
        place=self.check_grid(int)
        if place:
            self.land.remove(self)
            self.x=place[0]
            self.y=place[1]
            self.land.register(self)

    def breed(self):
        if self.breed_clock<=0:
            place=self.check_grid(int)
            if place:
                self.breed_clock=self.breed_time
                the_class=self.__class__
                new_animal=the_class(self.land, x=place[0],y=place[1])
                self.land.register(new_animal)

    def eat(self):

        place=self.check_grid(Prey)
        if place:
            self.land.remove(self.land.animal(place[0],place[1]))
            self.land.remove(self)
            self.x=place[0]
            self.y=place[1]
            self.land.register(self)
            self.starve_clock=self.starve_time


