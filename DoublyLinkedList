package javaapplication15;

/**
 *
 * @author usuario
 */
import java.util.NoSuchElementException;
public class DoublyLinkedList
{
    private class TwoWayNode
    {
        private String item;
        private TwoWayNode previous;
        private TwoWayNode next;
        
        public TwoWayNode()
        {
            item = null;
            next = null;
            previous = null;
        }
        public TwoWayNode(String newItem, TwoWayNode previousNode,
            TwoWayNode nextNode)
        {
            System.out.println("next before "+next);
            item = newItem;
            next = nextNode;
            previous = previousNode;
            System.out.println("next after "+next);
            //System.out.println("next.item after "+next.item);
        }
    } //End of TwoWayNode inner class
    public class DoublyLinkedIterator
    {
    // We do not need a previous node when using a doubly linked
    // list
        private TwoWayNode position = null;
        
        public DoublyLinkedIterator( )
        {
            position = head;
        }
        public void restart( )
        {
            position = head;
            System.out.println("head.next.next.item "+head.next.next.item);
        }
        public String next( )
        {
            if (!hasNext( ))
                throw new IllegalStateException( );
            String toReturn = position.item;
            position = position.next;
            return toReturn;
        }
        public boolean hasNext( )
        {
            return (position != null);
        } 
        public void insertHere(String newData)
        {
            if (position == null && head != null)
            {
        // Add to end. First move a temp
        // pointer to the end of the list
                TwoWayNode temp = head;
                while (temp.next != null)
                temp = temp.next;
                temp.next = new TwoWayNode(newData, temp, null);
            }
            else if (head == null || position.previous == null)
            // at head of list
                DoublyLinkedList.this.addToStart (newData);
            else
            {
            // Insert before the current position
                TwoWayNode temp = new TwoWayNode(newData,
                position. previous, position);
                position.previous.next = temp;
                position.previous = temp;
            }
        }
        public void delete( )
        {
            if (position == null)
                throw new IllegalStateException( );
            else if (position.previous == null)
            { // Deleting first node
                head = head.next;
                position = head;
            }
            else if (position.next == null)
            { // Deleting last node
                position.previous.next = null;
                position = null;
            }
            else
            {
                position.previous.next = position.next;
                position.next.previous = position.previous;
                position = position.next;
            }
        }
    } // DoublyLinkedIterator

        private TwoWayNode head;
        public DoublyLinkedIterator iterator( )
        {
            return new DoublyLinkedIterator( );
        }
        public DoublyLinkedList( )
        {
            head = null;
        }
        /**
        6 The added node will be the first node in the list.
        97 */
        public void addToStart(String itemName)
        {
            TwoWayNode newHead = new TwoWayNode(itemName, null, head);
            if (head != null)
            {
                head.previous = newHead;
            }
            head = newHead;
        }

} // DoublyLinkedList 
